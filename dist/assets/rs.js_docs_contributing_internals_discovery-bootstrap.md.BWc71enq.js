import{_ as e,c as t,o,a4 as r}from"./chunks/framework.Bi9zwDUp.js";const f=JSON.parse('{"title":"Discovery bootstrap","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/contributing/internals/discovery-bootstrap.md","filePath":"rs.js/docs/contributing/internals/discovery-bootstrap.md"}'),s={name:"rs.js/docs/contributing/internals/discovery-bootstrap.md"},a=r('<h1 id="discovery-bootstrap" tabindex="-1">Discovery bootstrap <a class="header-anchor" href="#discovery-bootstrap" aria-label="Permalink to &quot;Discovery bootstrap&quot;">â€‹</a></h1><p><em>This section describes how connecting to a storage works internally.</em></p><p>When the RemoteStorage instance is instantiated, it checks the fragment of the URL to see if it contains an <code>access_token</code> or <code>remotestorage</code> parameter. In the first case, the access token is given to the remote using <code>remoteStorage.remote.configure()</code>. In the second case, WebFinger discovery is triggered for the user address given (see <a href="https://tools.ietf.org/html/draft-dejong-remotestorage-09#section-11" target="_blank" rel="noreferrer">storage-first section</a> of the remoteStorage spec).</p><p>The user can also set the user address through the widget, or the app can call <code>remoteStorage.remote.configure({userAddress: &#39;user@host.com&#39;})</code> to set the user address.</p><p>When a user address is set, but no other remote parameters are known yet, WebFinger discovery will be triggered. From the WebFinger response, the library extract the storage base URL, the storage API, and the OAuth dialog URL.</p><p>If no OAuth URL is given, Implied Auth is triggered: <a href="https://github.com/remotestorage/remotestorage.js/issues/782" target="_blank" rel="noreferrer">https://github.com/remotestorage/remotestorage.js/issues/782</a></p><p>If an OAuth URL is known, but no token yet, the OAuth dance will be started by setting the <code>location.href</code> of the window, redirecting the user to that URL. When the dance comes back, the library will detect the <code>access_token</code> from the window location during the page load, and from that point onwards, the remote is connected.</p><p>If the OAuth flow is PKCE, the window location will contain a <code>code</code> parameter instead of <code>access_token</code>. RS then makes a fetch to remote.TOKEN_URL with the code, to retrieve the access token, and possibly a refresh token as well.</p>',8),n=[a];function i(c,d,h,g,p,l){return o(),t("div",null,n)}const u=e(s,[["render",i]]);export{f as __pageData,u as default};
