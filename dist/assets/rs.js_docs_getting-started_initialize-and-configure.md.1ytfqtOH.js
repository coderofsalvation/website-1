import{_ as a,c as i,o as s,a4 as e}from"./chunks/framework.Bi9zwDUp.js";const u=JSON.parse('{"title":"Initialization & configuration","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/initialize-and-configure.md","filePath":"rs.js/docs/getting-started/initialize-and-configure.md"}'),t={name:"rs.js/docs/getting-started/initialize-and-configure.md"},n=e('<h1 id="initialization-configuration" tabindex="-1">Initialization &amp; configuration <a class="header-anchor" href="#initialization-configuration" aria-label="Permalink to &quot;Initialization &amp; configuration&quot;">​</a></h1><p>Now that you&#39;ve imported the <code>RemoteStorage</code> class, here&#39;s how you typically set things up.</p><p>Where and how you do this exactly will naturally depend on the rest of your code, your JS framework, and personal preferences.</p><h2 id="initializing-an-instance" tabindex="-1">Initializing an instance <a class="header-anchor" href="#initializing-an-instance" aria-label="Permalink to &quot;Initializing an instance&quot;">​</a></h2><p>First step is to initialize a <a href="./../api/remotestorage/classes/RemoteStorage.html">RemoteStorage</a> instance:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remoteStorage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RemoteStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>The constructor optionally takes a configuration object. Let&#39;s say we want to enable debug logging to see in the console what rs.js is doing behind the scenes:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remoteStorage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RemoteStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({logging: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Or perhaps we&#39;re building an app that doesn&#39;t need local caching, but only operates on the remote server/account:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> remoteStorage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RemoteStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({cache: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>See the <a href="./../api/remotestorage/classes/RemoteStorage.html">RemoteStorage API</a> documentation for details.</p><h2 id="claiming-access" tabindex="-1">Claiming access <a class="header-anchor" href="#claiming-access" aria-label="Permalink to &quot;Claiming access&quot;">​</a></h2><p>Next, we need to tell rs.js which parts of the user&#39;s storage we want to access. Let&#39;s say we want to read and write a user&#39;s favorite drinks, which they might have added via the <a href="https://github.com/RemoteStorage/myfavoritedrinks" target="_blank" rel="noreferrer">My Favorite Drinks</a> demo app:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.access.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">claim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myfavoritedrinks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Now, when they connect their storage, users will be asked to give the app read/write access to the <code>myfavoritedrinks/</code> folder. And that&#39;s also what the OAuth token, which we receive from their storage server, will be valid for, of course.</p><p>If you want to build a special app, like for example a backup utility, or a data browser, you can also claim access to the entire storage (which is generally discouraged):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.access.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">claim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>See the <a href="./../api/access/classes/Access.html">Access API</a> documentation for details.</p><h2 id="configuring-caching" tabindex="-1">Configuring caching <a class="header-anchor" href="#configuring-caching" aria-label="Permalink to &quot;Configuring caching&quot;">​</a></h2><p>Last but not least, we&#39;ll usually want to configure caching (and with it automatic sync) for the data we&#39;re accessing. The <a href="./../api/caching/classes/Caching.html#enable">caching.enable()</a> method will activate full caching for the given path, meaning all of the items therein will be automatically synced with the server:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.caching.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/myfavoritedrinks/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>See the <a href="./../api/caching/classes/Caching.html">Caching API</a> documentation for details.</p>',22),h=[n];function l(o,r,p,c,d,g){return s(),i("div",null,h)}const y=a(t,[["render",l]]);export{u as __pageData,y as default};
