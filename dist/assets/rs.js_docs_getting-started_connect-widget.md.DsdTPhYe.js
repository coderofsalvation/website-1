import{_ as e,c as t,o as a,a4 as i}from"./chunks/framework.Bi9zwDUp.js";const k=JSON.parse('{"title":"Using the Connect Widget add-on","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/connect-widget.md","filePath":"rs.js/docs/getting-started/connect-widget.md"}'),s={name:"rs.js/docs/getting-started/connect-widget.md"},n=i('<h1 id="using-the-connect-widget-add-on" tabindex="-1">Using the Connect Widget add-on <a class="header-anchor" href="#using-the-connect-widget-add-on" aria-label="Permalink to &quot;Using the Connect Widget add-on&quot;">​</a></h1><p>The easiest option for letting people connect their storage to your app is using the Connect Widget add-on library, which is written and maintained by the rs.js core team.</p><p>This is optional and an easy way to integrate all functionality into your own UI. It&#39;s a great way to start with RS app development and can be replaced with custom code later on.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you haven&#39;t seen the widget in action yet, you can try it out with with <a href="https://myfavoritedrinks.5apps.com" target="_blank" rel="noreferrer">My Favorite Drinks</a> for example.</p></div><h2 id="adding-the-library" tabindex="-1">Adding the library <a class="header-anchor" href="#adding-the-library" aria-label="Permalink to &quot;Adding the library&quot;">​</a></h2><p>The Connect Widget library is distributed the same way as remoteStorage.js itself: as a <abbr title="Universal Module Definition">UMD</abbr> build, compatible with all JavaScript module systems, or as a global variable named <code>Widget</code>, when linked directly.</p><p>You can find the connect widget as <a href="https://www.npmjs.com/package/remotestorage-widget" target="_blank" rel="noreferrer"><code>remotestorage-widget</code></a> on npm, and its source code and usage instructions <a href="https://github.com/remotestorage/remotestorage-widget" target="_blank" rel="noreferrer">on GitHub</a>.</p><p>Check out <a href="./how-to-add.html">Adding rs.js to an app</a> for examples of loading a UMD module in your code.</p><h2 id="adding-the-widget" tabindex="-1">Adding the widget <a class="header-anchor" href="#adding-the-widget" aria-label="Permalink to &quot;Adding the widget&quot;">​</a></h2><p>With the <code>Widget</code> class loaded, create a new widget instance using the <a href="./initialize-and-configure.html">previously initialized</a> <code>remoteStorage</code> instance, like so:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> widget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Widget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(remoteStorage);</span></span></code></pre></div><p>Then you can attach the widget to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model" target="_blank" rel="noreferrer">DOM</a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Or if you want to attach it to a specific parent element, you can also hand it a DOM element ID:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-parent-element-id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>That&#39;s it. Now your users can use the widget in order to connect their storage, and you can listen to the <code>remoteStorage</code> instance&#39;s events in order to get informed about connection status, sync progress, errors, and so on.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;d like to implement connect functionality in your own user interface and code, the widget can serve as a useful source code example. For everything it does, the Connect Widget only uses public APIs and events of rs.js, which you can also use in your own code.</p></div>',17),o=[n];function d(r,c,l,h,p,g){return a(),t("div",null,o)}const m=e(s,[["render",d]]);export{k as __pageData,m as default};
