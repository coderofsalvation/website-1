import{_ as e,c as o,o as a,a4 as t}from"./chunks/framework.Bi9zwDUp.js";const g=JSON.parse('{"title":"Publishing and finding data modules","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/data-modules/publishing-and-finding-modules.md","filePath":"rs.js/docs/data-modules/publishing-and-finding-modules.md"}'),r={name:"rs.js/docs/data-modules/publishing-and-finding-modules.md"},n=t('<h1 id="publishing-and-finding-data-modules" tabindex="-1">Publishing and finding data modules <a class="header-anchor" href="#publishing-and-finding-data-modules" aria-label="Permalink to &quot;Publishing and finding data modules&quot;">​</a></h1><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><p>The recommended way for publishing data modules is as <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a> packages.</p><p>Our naming convention for rs.js modules is <code>remotestorage-module-mymodulename</code>. Thus, you can also find them by <a href="https://www.npmjs.com/search?q=remotestorage-module" target="_blank" rel="noreferrer">searching npm for &quot;remotestorage-module&quot;</a>.</p><p>You can also add &quot;remotestorage-module&quot; and &quot;remotestorage&quot; to the <code>keywords</code> property of your <code>package.json</code>.</p><h2 id="github-co" tabindex="-1">GitHub &amp; Co. <a class="header-anchor" href="#github-co" aria-label="Permalink to &quot;GitHub &amp; Co.&quot;">​</a></h2><p>If you use GitHub ‒ or any other code hosting/collaboration platform for that matter ‒ for publishing your module&#39;s source code, please use the same naming convention as for the npm module for the repo name. And it&#39;s a good idea to add the topic/tag/label &quot;remotestorage-module&quot; there as well, of course.</p><p><a href="https://github.com/topics/remotestorage-module" target="_blank" rel="noreferrer">https://github.com/topics/remotestorage-module</a></p><p>::: hint ::: title Hint :::</p><p>With npm, you can also install modules directly from a Git repo or GitHub, pointing to just the repo or a branch name, tag, or commit: <a href="https://docs.npmjs.com/files/package.json#github-urls" target="_blank" rel="noreferrer">https://docs.npmjs.com/files/package.json#github-urls</a> :::</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><ul><li>For a real-world example of a data module package, see e.g. the shares module <a href="https://github.com/skddc/remotestorage-module-shares" target="_blank" rel="noreferrer">on GitHub</a> and <a href="https://www.npmjs.com/package/remotestorage-module-shares" target="_blank" rel="noreferrer">on npm</a>. Check out <code>webpack.config.js</code> and the source code in <code>index.js</code> to see how it is built and exported.</li></ul><p>::: note ::: title Note :::</p><p>Unfortunately, we didn&#39;t have any package management for data modules before rs.js 1.0. To be fair, JavaScript package managers weren&#39;t actually a thing yet, when this functionality was added to the library. However, it means we&#39;re still in the process of porting and publishing modules and you won&#39;t find very many existing data modules on npm right now. You can check the <a href="https://github.com/remotestorage/modules" target="_blank" rel="noreferrer">old modules repo</a> for source code of legacy modules. :::</p>',14),s=[n];function d(i,l,m,u,c,h){return a(),o("div",null,s)}const f=e(r,[["render",d]]);export{g as __pageData,f as default};
