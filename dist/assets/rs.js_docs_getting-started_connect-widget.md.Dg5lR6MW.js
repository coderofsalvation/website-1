import{_ as a,c as n,o as i,a4 as o,j as e,a as t}from"./chunks/framework.Bi9zwDUp.js";const f=JSON.parse('{"title":"Using the Connect Widget add-on","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/connect-widget.md","filePath":"rs.js/docs/getting-started/connect-widget.md"}'),d={name:"rs.js/docs/getting-started/connect-widget.md"},r=o('<h1 id="using-the-connect-widget-add-on" tabindex="-1">Using the Connect Widget add-on <a class="header-anchor" href="#using-the-connect-widget-add-on" aria-label="Permalink to &quot;Using the Connect Widget add-on&quot;">​</a></h1><p>The easiest option for letting people connect their storage to your app is using the Connect Widget add-on library, which is written and maintained by the rs.js core team.</p><p>This is optional and an easy way to integrate all functionality into your own UI. It&#39;s a great way to start with RS app development and, can be replaced with custom code later on.</p><p>::: hint ::: title Hint :::</p><p>If you haven&#39;t seen the widget in action yet, you can try it out e.g. with <a href="https://myfavoritedrinks.5apps.com" target="_blank" rel="noreferrer">My Favorite Drinks</a> right now. :::</p><h2 id="adding-the-library" tabindex="-1">Adding the library <a class="header-anchor" href="#adding-the-library" aria-label="Permalink to &quot;Adding the library&quot;">​</a></h2>',6),s=e("p",null,[t("The Connect Widget library is distributed the same way as "),e("em",null,"remoteStorage.js"),t(" itself: as a "),e("code",{class:"interpreted-text",role:"abbr"},"UMD (Universal Module Definition)"),t(" build, compatible with all JavaScript module systems, or as a global variable named "),e("code",null,"Widget"),t(", when linked directly.")],-1),c=o(`<p>You can find the connect widget as <code>remotestorage-widget</code> on npm, and its source code and usage instructions <a href="https://github.com/remotestorage/remotestorage-widget" target="_blank" rel="noreferrer">on GitHub</a>.</p><p>Check out <code>Adding rs.js to an app &lt;/getting-started/how-to-add&gt;</code>{.interpreted-text role=&quot;doc&quot;} for examples of loading a UMD module in your code.</p><h2 id="adding-the-widget" tabindex="-1">Adding the widget <a class="header-anchor" href="#adding-the-widget" aria-label="Permalink to &quot;Adding the widget&quot;">​</a></h2><p>With the <code>Widget</code> class loaded, just create a new widget instance using the <code>previously initialized &lt;/getting-started/initialize-and-configure&gt;</code>{.interpreted-text role=&quot;doc&quot;} <code>remoteStorage</code> instance, like so:</p><pre><code>const widget = new Widget(remoteStorage);
</code></pre><p>Then you can attach the widget to the DOM:</p><pre><code>widget.attach();
</code></pre><p>Or if you want to attach it to a specific parent element, you can also hand it a DOM element ID:</p><pre><code>widget.attach(&#39;my-parent-element-id&#39;);
</code></pre><p>That&#39;s it! Now your users can use the widget in order to connect their storage, and you can listen to the <code>remoteStorage</code> instance&#39;s events in order to get informed about connection status, sync progress, errors, and so on.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>::: title Tip</p></div><p>If you&#39;d like to implement connect functionality in your own user interface and code, the widget can serve as a useful source code example. For everything it does, the Connect Widget only uses public APIs and events of rs.js, which you can also use in your own code. :::</p>`,12),l=[r,s,c];function g(h,p,u,m,_,w){return i(),n("div",null,l)}const b=a(d,[["render",g]]);export{f as __pageData,b as default};
