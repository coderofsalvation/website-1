import{_ as e,c as t,o as a,a5 as o}from"./chunks/framework.CTkMpXT2.js";const m=JSON.parse('{"title":"Usage with Node.js","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/nodejs.md","filePath":"rs.js/docs/nodejs.md"}'),r={name:"rs.js/docs/nodejs.md"},s=o('<h1 id="usage-with-node-js" tabindex="-1">Usage with Node.js <a class="header-anchor" href="#usage-with-node-js" aria-label="Permalink to &quot;Usage with Node.js&quot;">​</a></h1><p>Although remoteStorage.js was initially written for being used in browsers, we do support using it in a Node.js environment as well.</p><p>The main difference between rs.js in a browser and using it on a server or in a CLI program is how to connect a storage. The RS protocol uses the OAuth Implicit Grant flow for clients to receive a bearer token, which they can use in HTTP requests. This works by redirecting back to the Web application with the token attached to the redirect URI as a URI fragment.</p><p>Now, with rs.js in a browser, calling <code>remoteStorage.connect(&#39;user@example.com&#39;)</code> will take care of the entire OAuth process, including the parsing of the URI after the redirect, saving the token to localStorage and changing the library&#39;s state to connected. But in a node.js program, that&#39;s obviously not possible, because there&#39;s no browser that will open the OAuth dialog and receive the redirect with the token attached to the redirect URI.</p><h2 id="connect-with-a-token" tabindex="-1">connect() with a token <a class="header-anchor" href="#connect-with-a-token" aria-label="Permalink to &quot;connect() with a token&quot;">​</a></h2><p>For this reason, among others, you can call the connect function with a token that you acquired beforehand:</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user@example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abcdef123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This will skip the entire OAuth process, because you did that before in some other way, of course.</p><h2 id="obtaining-a-token" tabindex="-1">Obtaining a token <a class="header-anchor" href="#obtaining-a-token" aria-label="Permalink to &quot;Obtaining a token&quot;">​</a></h2><p>For some programs, like e.g. a server daemon, you can usually acquire the token from your server manually, and then just configure it for example as environment variable, when running your program.</p><p>For CLI programs, and if you actually want to integrate the OAuth flow in your program, one possible solution is the following:</p><ol><li>Set up a simple Web site/app, which you publish under a fitting domain/URI that you can use as the OAuth redirect URI.</li><li>Have the user enter their user address and do a Webfinger lookup for auth URL etc., e.g. using <a href="https://www.npmjs.com/package/webfinger.js" target="_blank" rel="noreferrer">webfinger.js</a>.</li><li>Create the OAuth request URI with the correct scope etc., and open a browser window with that URI from your program (or prompt the user to open it).</li><li>Have the Web app, which the user is being redirected to, show the token to the user, in order for them to copy and enter in your program</li><li>Connect with that token.</li></ol><p>You can find a complete example for this process in <a href="https://github.com/skddc/rs-backup" target="_blank" rel="noreferrer">rs-backup</a>, a remoteStorage backup CLI program. In particular <a href="https://github.com/skddc/rs-backup/blob/v1.5.0/backup.js#L137-L160" target="_blank" rel="noreferrer">its code for connecting a storage</a> and the <a href="https://github.com/skddc/rs-backup-auth-page" target="_blank" rel="noreferrer">simple Web page</a> its using for the redirect.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>rs-backup is not using remoteStorage.js at all, which you might also want to consider as an option when writing non-browser applications.</p></div><h2 id="caveats" tabindex="-1">Caveats <a class="header-anchor" href="#caveats" aria-label="Permalink to &quot;Caveats&quot;">​</a></h2><ul><li>IndexedDB and localStorage are not supported by default in Node.js, so the library will fall back to in-memory storage for caching data locally. This means that unsynchronized data will be lost between sessions and program executions.</li><li>Node 18 includes <code>fetch</code> natively, but earlier versions do not, and so it may be necessary to set <code>global.fetch</code> with a polyfill such as <a href="https://www.npmjs.com/package/node-fetch" target="_blank" rel="noreferrer">node-fetch</a>.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><ul><li><a href="https://github.com/67P/hubot-remotestorage-logger" target="_blank" rel="noreferrer">hubot-remotestorage-logger</a>, a Hubot script that logs chat messages to remoteStorage-enabled accounts using the <a href="https://www.npmjs.com/package/remotestorage-module-chat-messages" target="_blank" rel="noreferrer">chat-messages</a> module</li></ul>',18),i=[s];function n(h,l,c,p,d,u){return a(),t("div",null,i)}const b=e(r,[["render",n]]);export{m as __pageData,b as default};
