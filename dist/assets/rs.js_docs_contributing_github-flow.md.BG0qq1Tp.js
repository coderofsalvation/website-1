import{_ as e,c as t,o,a4 as a}from"./chunks/framework.Bi9zwDUp.js";const f=JSON.parse('{"title":"GitHub workflow","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/contributing/github-flow.md","filePath":"rs.js/docs/contributing/github-flow.md"}'),i={name:"rs.js/docs/contributing/github-flow.md"},s=a('<h1 id="github-workflow" tabindex="-1">GitHub workflow <a class="header-anchor" href="#github-workflow" aria-label="Permalink to &quot;GitHub workflow&quot;">​</a></h1><h2 id="general-guidelines" tabindex="-1">General guidelines <a class="header-anchor" href="#general-guidelines" aria-label="Permalink to &quot;General guidelines&quot;">​</a></h2><ul><li>When you start working on an existing GitHub issue (or you plan on doing that in the immediate future), assign it to yourself, so that others can see it and don&#39;t start working on it in parallel.</li><li>When you create a branch to work on something, use the naming scheme described further down in this document.</li><li>Never push directly to the <code>master</code> branch for any changes to the source code itself.</li><li>As soon as you want others to review your changes, or even just discuss them, create a pull request. Don&#39;t forget to explain roughly what it is you&#39;re doing in that branch, i.e. what the problem/idea is and what the result is supposed to be, when merging the changes. If necessary or helpful, mention related discussions from other issues.</li><li>A pull request can be merged as soon as at least two people with commit access to the repo have given a +1, meaning they reviewed and tested the changes and have no further improvements to suggest.</li></ul><h2 id="branch-names" tabindex="-1">Branch names <a class="header-anchor" href="#branch-names" aria-label="Permalink to &quot;Branch names&quot;">​</a></h2><p>Using common branch names, that include topics and issue IDs, makes everyone&#39;s lives much easier, and keep the repo clean. Branches on our organization repositories should be created using the following scheme:</p><p><code>[bugfix|feature|docs|refactor]/[issue id]-[description_with_underscores]</code></p><p>So for example, if you want to work on fixing a bug with let&#39;s say initial sync, that is described in issue #423, the branch should look something like:</p><p><code>bugfix/423-race_condition_on_initial_sync</code></p><p>And if it&#39;s an enhancement to the widget it could look like this e.g.:</p><p><code>feature/321-customizable_widget_content</code></p><p>If there&#39;s no issue yet, create one first!</p><h2 id="pulling-changes" tabindex="-1">Pulling changes <a class="header-anchor" href="#pulling-changes" aria-label="Permalink to &quot;Pulling changes&quot;">​</a></h2><p>Always use <code>--rebase</code> when pulling code from the remote repo. That way your local changes are added on top of the current history, avoiding merge commits and mixing up the commit history. You can set up Git to use rebase on every pull by default by running <code>git config --global pull.rebase true</code> once.</p><p>If you also add the <code>autostash</code> option, Git will stash any changed files before the pull and unstash them afterwards: <code>git config --global rebase.autoStash true</code>.</p><p>If you don&#39;t want to configure both options globally, or you prefer a catchier command name for updating a repository with remote changes, we recommend configuring an alias, like so: <code>git config --global alias.up &#39;pull --rebase --autostash&#39;</code>. Now you can simply run <code>git up</code> in select repos, or everywhere.</p><h2 id="commit-messages" tabindex="-1">Commit messages <a class="header-anchor" href="#commit-messages" aria-label="Permalink to &quot;Commit messages&quot;">​</a></h2><ul><li>The first line of the message (aptly called &quot;subject line&quot; in Git terminology) should not be longer than 72 characters.</li><li>If the subject line is not enough to describe the changes properly, add a blank line after the subject line and then as much text as you want, using normal language with capitalization, punctuation, etc.</li><li>Always use messages that describe roughly <em>what</em> the change does and, if not obvious, <em>why</em> this change leads to the desired result.</li><li>Leave out any text that isn&#39;t directly associated with the changes, that the commit introduces. Examples: &quot;as suggested by @chucknorris&quot;, &quot;lol wtf was that&quot;, &quot;not sure if this fixes it&quot;.</li><li>Commit as much and often as possible locally (and with any message that helps you during your work), and then clean up the history and merge commits that belong together before pushing to the org repo. You can do that with <code>git rebase -i [ref]</code> (<a href="http://www.reviewboard.org/docs/codebase/dev/git/clean-commits/#rewriting-history" target="_blank" rel="noreferrer">learn more</a>).</li><li>You can reference issues from commit messages by adding keywords with issue numbers. Certain keywords will even close the issue automatically, once a branch is merged into master. For example <code>Fix widget flickering when opening bubble (fixes #423)</code> will close issue #423 when appearing on the master branch at GitHub.</li></ul><h2 id="reviewing-pull-requests" tabindex="-1">Reviewing pull requests <a class="header-anchor" href="#reviewing-pull-requests" aria-label="Permalink to &quot;Reviewing pull requests&quot;">​</a></h2><ul><li>Check if it works, if it has unit tests, if the tests pass, and if the linter is happy.</li><li>Check if the code is understandable, with clear and unambiguous names for functions and variables, and that it has TypeDoc comments and a changelog entry.</li><li>If the pull request was issued from a user&#39;s own repository, you will have to fetch the code from there. If you haven&#39;t pulled from their fork previously, you can add a new remote for it with <code>git remote add [username] [repo-url]</code>. Then, <code>git fetch [username]</code> will fetch code from this remote, so you can then check out their branch using <code>git checkout [username]/branchname</code>.</li><li>This will put you in a so-called &#39;detached HEAD&#39; state, but don&#39;t worry, everything is fine! If you want to work on that code, just create a new branch from there with the command Git tells you then, or just go back to your code with e.g. <code>git checkout master</code> later.)</li></ul><h2 id="merging-pull-requests" tabindex="-1">Merging pull requests <a class="header-anchor" href="#merging-pull-requests" aria-label="Permalink to &quot;Merging pull requests&quot;">​</a></h2><ul><li>Once a pull request has two +1s for the latest changes from collaborators, you can either merge it yourself or wait for somebody to do it for you (which will happen very soon).</li><li>If the new commits and their commit messages in that branch all make sense on their own, you can use the merge button on GitHub directly.</li><li>If there are a lot of small commits, which might not make sense on their own, or pollute the main project history (often the case with long running pull requests with a lot of additions during their lifetime), fetch the latest changes to your local machine, and either do an interactive rebase to clean up branch and merge normally, or use <code>git merge --squash</code> to squash them all into one commit during the merge.</li><li>Whenever you squash multiple commits with either <code>git rebase -i</code> or <code>git merge --squash</code>, make sure to follow the commit message guidelines above. Don&#39;t just leave all old commit messages in there (which is the default), but delete them and create a new meaningful message for the whole changeset.</li><li>When squashing/editing/amending other peoples&#39; commits, use <code>--author</code> to set them as the original author. You don&#39;t need full names for that, but just something that Git can find in the history. It&#39;ll tell you if it can&#39;t find an author and let you do it again.</li></ul>',21),n=[s];function r(l,h,c,u,d,m){return o(),t("div",null,n)}const p=e(i,[["render",r]]);export{f as __pageData,p as default};
