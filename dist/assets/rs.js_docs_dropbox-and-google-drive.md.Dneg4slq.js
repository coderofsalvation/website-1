import{_ as e,c as o,o as s,a5 as t}from"./chunks/framework.CTkMpXT2.js";const a="/assets/screenshot-widget-choose.C9x-_ElZ.png",b=JSON.parse('{"title":"Offering Dropbox and Google Drive storage options","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/dropbox-and-google-drive.md","filePath":"rs.js/docs/dropbox-and-google-drive.md"}'),i={name:"rs.js/docs/dropbox-and-google-drive.md"},r=t('<h1 id="offering-dropbox-and-google-drive-storage-options" tabindex="-1">Offering Dropbox and Google Drive storage options <a class="header-anchor" href="#offering-dropbox-and-google-drive-storage-options" aria-label="Permalink to &quot;Offering Dropbox and Google Drive storage options&quot;">​</a></h1><p><img src="'+a+`" alt="Screenshot of the connect-widget choose-backend screen" width="50%"></p><p>rs.js has optional support for syncing data with Dropbox and Google Drive instead of a RemoteStorage server.</p><p>There are a few drawbacks, mostly sync performance and the lack of a permission model. So apps can usually access all of a user&#39;s storage with these backends (vs. only relevant parts of the storage with RS accounts). However, while RS is not a widely known and deployed protocol, we find it helpful to let users choose something they already know, and potentially migrate to an RS account later on.</p><p>For these additional backends to work, you will have to register your app with Dropbox and/or Google first. Then you can configure your OAuth app ID/key like so:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setApiKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dropbox: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your-app-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  googledrive: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your-client-id&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <a href="./getting-started/connect-widget.html">Connect widget</a> will automatically show only the available storage options, based on the presence of the Dropbox and Google Drive API keys. RemoteStorage is always enabled.</p></div><h2 id="dropbox" tabindex="-1">Dropbox <a class="header-anchor" href="#dropbox" aria-label="Permalink to &quot;Dropbox&quot;">​</a></h2><p>An app key can be obtained by <a href="https://www.dropbox.com/developers/apps" target="_blank" rel="noreferrer">registering your app</a>.</p><p>Create a new &quot;scoped&quot; app for the &quot;Dropbox API&quot;, with these scopes:</p><ul><li><code>account_info.read</code></li><li><code>files.metadata.read</code></li><li><code>files.metadata.write</code></li><li><code>files.content.read</code></li><li><code>files.content.write</code></li></ul><p>You need to set one or more OAuth2 redirect URIs for all routes a user can connect from, for example <code>http://localhost:8000</code> for an app you are developing locally. If the path is &#39;/&#39;, rs.js drops it.</p><h3 id="known-issues" tabindex="-1">Known issues <a class="header-anchor" href="#known-issues" aria-label="Permalink to &quot;Known issues&quot;">​</a></h3><ul><li>Storing files larger than 150MB is not yet supported</li><li>Listing and deleting folders with more than 10000 files will cause problems</li><li>Content-Type is not fully supported due to limitations of the Dropbox API</li><li>Dropbox preserves cases but is not case-sensitive</li><li><code>getItemURL</code> is not implemented yet (see issue 1052)</li></ul><h2 id="google-drive" tabindex="-1">Google Drive <a class="header-anchor" href="#google-drive" aria-label="Permalink to &quot;Google Drive&quot;">​</a></h2><p>A client ID can be obtained by registering your app in the <a href="https://console.developers.google.com/flows/enableapi?apiid=drive" target="_blank" rel="noreferrer">Google Developers Console</a>.</p><ul><li>Create an API, then add credentials for Google Drive API. Specify you will be calling the API from a &quot;Web browser (Javascript)&quot; project. Select that you want to access &quot;User data&quot;.</li><li>On the next screen, fill out the Authorized JavaScript origins and Authorized redirect URIs for your app (for every route a user can connect from, same as with Dropbox)</li><li>Once your app is running in production, you will want to get verified by Google to avoid a security warning when the user first connects their account</li></ul><h3 id="known-issues-1" tabindex="-1">Known issues <a class="header-anchor" href="#known-issues-1" aria-label="Permalink to &quot;Known issues&quot;">​</a></h3><ul><li>Sharing public files is not supported yet (see issue 1051)</li><li><code>getItemURL</code> is not implemented yet (see issue 1054)</li></ul>`,19),n=[r];function l(p,d,c,h,u,g){return s(),o("div",null,n)}const k=e(i,[["render",l]]);export{b as __pageData,k as default};
