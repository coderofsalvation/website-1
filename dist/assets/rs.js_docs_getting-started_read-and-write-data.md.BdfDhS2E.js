import{_ as a,c as s,o as i,a4 as e}from"./chunks/framework.Bi9zwDUp.js";const E=JSON.parse('{"title":"Reading and writing data","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/read-and-write-data.md","filePath":"rs.js/docs/getting-started/read-and-write-data.md"}'),t={name:"rs.js/docs/getting-started/read-and-write-data.md"},n=e(`<h1 id="reading-and-writing-data" tabindex="-1">Reading and writing data <a class="header-anchor" href="#reading-and-writing-data" aria-label="Permalink to &quot;Reading and writing data&quot;">​</a></h1><p>As soon as your <a href="./../api/remotestorage/classes/RemoteStorage.html">RemoteStorage</a> instance is ready for action (signaled by the <code>ready</code> event), we can start reading and writing data.</p><h2 id="anonymous-mode" tabindex="-1">Anonymous mode <a class="header-anchor" href="#anonymous-mode" aria-label="Permalink to &quot;Anonymous mode&quot;">​</a></h2><p>One of the unique features of rs.js is that users are not required to have their storage connected in order to use the app; you can require connecting storage if it fits your use case. Any data written locally is automatically synced to the remote storage server when connecting an account.</p><h2 id="using-baseclient" tabindex="-1">Using BaseClient <a class="header-anchor" href="#using-baseclient" aria-label="Permalink to &quot;Using BaseClient&quot;">​</a></h2><p>A <a href="./../api/baseclient/classes/BaseClient.html">BaseClient</a> instance is the main endpoint for interacting with storage: listing, reading, creating, updating and deleting documents, as well as handling change events.</p><div class="warning custom-block"><p class="custom-block-title">TODO</p><p>Update paragraph, link directly to relevant section</p></div><p>Check out the <a href="./../api/baseclient/classes/BaseClient.html">BaseClient</a> in order to learn about all functions available for reading and writing data and how to use them.</p><p>There are two options for acquiring a <a href="./../api/baseclient/classes/BaseClient.html">BaseClient</a> instance:</p><h3 id="quick-and-dirty-creating-a-client-via-scope" tabindex="-1">Quick and dirty: creating a client via <code>scope()</code> <a class="header-anchor" href="#quick-and-dirty-creating-a-client-via-scope" aria-label="Permalink to &quot;Quick and dirty: creating a client via \`scope()\`&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>This should mainly be used for manually exploring client functions and locally in development.</p></div><p>Using the <a href="./../api/baseclient/classes/BaseClient.html#scope">scope</a> method, you can create a new <a href="./../api/baseclient/classes/BaseClient.html">BaseClient</a> scoped to a given path:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remoteStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/foo/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// List all items in the &quot;foo/&quot; category/folder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getListing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">listing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listing));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write some text to &quot;foo/bar.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;The most simple things can bring the most happiness.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data has been saved&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h3 id="the-recommended-way-using-clients-in-data-modules" tabindex="-1">The recommended way: using clients in data modules <a class="header-anchor" href="#the-recommended-way-using-clients-in-data-modules" aria-label="Permalink to &quot;The recommended way: using clients in data modules&quot;">​</a></h3><p>The recommended way is to use the private and public <a href="./../api/baseclient/classes/BaseClient.html">BaseClient</a> instances, which are available in so-called <a href="./../data-modules.html">data modules</a>. Continue to the next section in order to learn about them.</p>`,15),l=[n];function h(r,o,d,p,c,k){return i(),s("div",null,l)}const u=a(t,[["render",h]]);export{E as __pageData,u as default};
