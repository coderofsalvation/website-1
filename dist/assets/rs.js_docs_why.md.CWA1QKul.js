import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.Bi9zwDUp.js";const g=JSON.parse('{"title":"Why use this?","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/why.md","filePath":"rs.js/docs/why.md"}'),s={name:"rs.js/docs/why.md"},i=o('<h1 id="why-use-this" tabindex="-1">Why use this? <a class="header-anchor" href="#why-use-this" aria-label="Permalink to &quot;Why use this?&quot;">​</a></h1><h2 id="offline-first-design" tabindex="-1">Offline-first design <a class="header-anchor" href="#offline-first-design" aria-label="Permalink to &quot;Offline-first design&quot;">​</a></h2><p>rs.js stores data locally first and syncs data with a remote storage account second. This makes it a robust sync solution for mobile applications, where slow and spotty network connections are a normal situation.</p><p>Apps and use cases that don&#39;t require caching can keep selective data locally while not caching the rest.</p><p>When a backend goes down, users can just keep using the app and have their data automatically synced as soon as the server is back online.</p><h2 id="zero-backend" tabindex="-1">Zero backend <a class="header-anchor" href="#zero-backend" aria-label="Permalink to &quot;Zero backend&quot;">​</a></h2><p>rs.js is built for creating <a href="/unhosted.html">unhosted</a> apps. Users can connect their own storage account to apps on their devices, without needing to trust app developers with private data. Developers can rapidly build apps without investing in integrating, managing, maintaining, or securing data.</p><p>A nice side effect of this design is that your app can scale to millions of users with literally <em>zero</em> cost for storage.</p><p>Also, if an app goes offline or is abandoned, people can continue to use it across devices until they switch to a new one at their own pace. If an abandoned app comes back at some point, many active users may still be there.</p><h2 id="data-sharing" tabindex="-1">Data sharing <a class="header-anchor" href="#data-sharing" aria-label="Permalink to &quot;Data sharing&quot;">​</a></h2><p>Different apps can access the same data, so you can build an app that uses and manipulates existing data, without building import/export features or having users start over from scratch.</p><p>Even better, you can get advanced capabilities for free by using shared, open-source <a href="./data-modules.html">data modules</a>, which you can cooperate on with other developers.</p><p>For example: enable the sharing of files by simply integrating the <a href="https://github.com/skddc/remotestorage-module-shares" target="_blank" rel="noreferrer">shares module</a>, giving you client-side thumbnail generation for images as well as other features for free.</p><h2 id="reliability" tabindex="-1">Reliability <a class="header-anchor" href="#reliability" aria-label="Permalink to &quot;Reliability&quot;">​</a></h2><p>The first prototype of rs.js was written in November 2010. Since then, it has been used, tested, stabilized, and improved in over 4000 commits. The library has been used in commercial apps by hundreds of thousands of users, and in countries across the globe. Bugs and issues have been noted and fixed for virtually every device, browser, privacy setting and network connection there is.</p><p>In short: you can rely on rs.js to do its job. And if you do find a critical bug, there&#39;s a team of people who will help with fixing it.</p><h2 id="one-js-api-for-multiple-storage-options" tabindex="-1">One JS API for multiple storage options <a class="header-anchor" href="#one-js-api-for-multiple-storage-options" aria-label="Permalink to &quot;One JS API for multiple storage options&quot;">​</a></h2><p>rs.js optionally supports Dropbox and Google Drive as storage backends which users can connect. Conveniently, as an app developer you don&#39;t have to implement anything special in order for these backends to work with your code. Just <a href="./getting-started/dropbox-and-google-drive.html">configure OAuth app keys</a>, and your users can choose between 3 different backends to connect. If you&#39;re not using the <a href="./getting-started/connect-widget.html">connect widget</a>, you may need to create additional UI for these alternate backends.</p>',18),n=[i];function r(h,l,c,d,p,u){return t(),a("div",null,n)}const m=e(s,[["render",r]]);export{g as __pageData,m as default};
