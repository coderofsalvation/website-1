import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.CTkMpXT2.js";const E=JSON.parse('{"title":"Loading data on app launch/startup","titleTemplate":"remoteStorage.js","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/loading-data.md","filePath":"rs.js/docs/getting-started/loading-data.md"}'),t={name:"rs.js/docs/getting-started/loading-data.md"},n=e(`<h1 id="loading-data-on-app-launch-startup" tabindex="-1">Loading data on app launch/startup <a class="header-anchor" href="#loading-data-on-app-launch-startup" aria-label="Permalink to &quot;Loading data on app launch/startup&quot;">​</a></h1><p>In order to load data into memory (or the DOM) during the startup of your app, there are generally two different approaches with remoteStorage.js:</p><h2 id="option-1-relying-solely-on-events" tabindex="-1">Option 1: Relying solely on events <a class="header-anchor" href="#option-1-relying-solely-on-events" aria-label="Permalink to &quot;Option 1: Relying solely on events&quot;">​</a></h2><p>Upon initialization, remoteStorage.js will emit <a href="./../api/baseclient/classes/BaseClient.html#change-events">change events</a> events with the origin <code>local</code> for all documents found in the local cache.</p><p>Consider for example the following <a href="https://github.com/remotestorage/myfavoritedrinks/blob/master/app.js#L33-L37" target="_blank" rel="noreferrer">code from the example app My Favorite Drinks</a>, which uses them to display the stored items:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remoteStorage.myfavoritedrinks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.newValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.oldValue)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Change from &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; (add)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    displayDrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.relativePath, event.newValue.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The benefit of this approach is that the app displays items loaded from the local cache during app startup, as well as items synchronized from the remote storage afterwards! &quot;Feeding two birds with one scone&quot;, as they say.</p><p>Depending on your use case and app architecture, this means that there is no need to distinguish between <code>local</code> and <code>remote</code> changes per se.</p><h2 id="option-2-use-getall-then-update-via-events" tabindex="-1">Option 2: Use <code>getAll()</code>, then update via events <a class="header-anchor" href="#option-2-use-getall-then-update-via-events" aria-label="Permalink to &quot;Option 2: Use \`getAll()\`, then update via events&quot;">​</a></h2><p>The second approach is to use the <a href="./../api/baseclient/classes/BaseClient.html#getall">getAll()</a> function to load all relevant documents on startup, and then use only <code>remote</code> change events to add, update, and remove items when updates are being received from the remote storage.</p><p>Consider this code example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/my-sub-folder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  renderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, items[path]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.newValue) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, items[path]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The benefit of this approach is that you can render all items at once, instead of potentially flooding the screen with hundreds of items being added one by one as they are loaded.</p><p>However, when doing it this way, you have to ensure to either only listen to change events with origin <code>remote</code>, or to register the event listener <em>after</em> you have loaded all available items with <a href="./../api/baseclient/classes/BaseClient.html#getall">getAll()</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want <a href="./../api/baseclient/classes/BaseClient.html#getall">getAll()</a> to immediately return all locally cached items, and not wait to check the remote storage for potential updates, set the optional <code>maxAge</code> argument to <code>false</code>.</p></div>`,15),l=[n];function h(p,o,r,d,k,c){return i(),a("div",null,l)}const y=s(t,[["render",h]]);export{E as __pageData,y as default};
