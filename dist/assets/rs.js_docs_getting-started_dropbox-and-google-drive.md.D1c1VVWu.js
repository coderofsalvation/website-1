import{_ as r,c as a,o as s,a4 as t,j as e,a as o}from"./chunks/framework.Bi9zwDUp.js";const n="/assets/screenshot-widget-choose.C9x-_ElZ.png",x=JSON.parse('{"title":"Offering Dropbox and Google Drive storage options","description":"","frontmatter":{},"headers":[],"relativePath":"rs.js/docs/getting-started/dropbox-and-google-drive.md","filePath":"rs.js/docs/getting-started/dropbox-and-google-drive.md"}'),i={name:"rs.js/docs/getting-started/dropbox-and-google-drive.md"},l=t('<h1 id="offering-dropbox-and-google-drive-storage-options" tabindex="-1">Offering Dropbox and Google Drive storage options <a class="header-anchor" href="#offering-dropbox-and-google-drive-storage-options" aria-label="Permalink to &quot;Offering Dropbox and Google Drive storage options&quot;">​</a></h1><p><img src="'+n+`" alt="Screenshot of the connect-widget choose-backend screen">{.align-right width=&quot;195px&quot;}</p><p>rs.js has optional support for syncing data with Dropbox and Google Drive instead of a RemoteStorage server.</p><p>There are a few drawbacks, mostly sync performance and the lack of a permission model. So apps can usually access all of a user&#39;s storage with these backends (vs. only relevant parts of the storage with RS accounts). However, while RS is not a widely known and deployed protocol, we find it helpful to let users choose something they already know, and potentially migrate to an RS account later on.</p><p>For these additional backends to work, you will have to register your app with Dropbox and/or Google first. Then you can configure your OAuth app ID/key like so:</p><pre><code>remoteStorage.setApiKeys({
  dropbox: &#39;your-app-key&#39;,
  googledrive: &#39;your-client-id&#39;
});
</code></pre><p>::: hint ::: title Hint :::</p><p>The <code>Connect widget&lt;/getting-started/connect-widget&gt;</code>{.interpreted-text role=&quot;doc&quot;} will automatically show only the available storage options, based on the presence of the [dropbox]{.title-ref} and [googledrive]{.title-ref} API keys. RemoteStorage is always enabled. :::</p><h2 id="dropbox" tabindex="-1">Dropbox <a class="header-anchor" href="#dropbox" aria-label="Permalink to &quot;Dropbox&quot;">​</a></h2><p>An app key can be obtained by <a href="https://www.dropbox.com/developers/apps" target="_blank" rel="noreferrer">registering your app</a>.</p><ul><li></li></ul><pre><code>Create a new \\&quot;scoped\\&quot; app for the \\&quot;Dropbox API\\&quot;, with these scopes:

:   -   account_info.read
    -   files.metadata.read
    -   files.metadata.write
    -   files.content.read
    -   files.content.write
</code></pre><ul><li>You need to set one or more OAuth2 redirect URIs for all routes a user can connect from, for example <code>http://localhost:8000</code> for an app you are developing locally. If the path is &#39;/&#39;, rs.js drops it.</li></ul><h3 id="known-issues" tabindex="-1">Known issues <a class="header-anchor" href="#known-issues" aria-label="Permalink to &quot;Known issues&quot;">​</a></h3>`,14),d=e("ul",null,[e("li",null,"Storing files larger than 150MB is not yet supported"),e("li",null,"Listing and deleting folders with more than 10000 files will cause problems"),e("li",null,"Content-Type is not fully supported due to limitations of the Dropbox API"),e("li",null,"Dropbox preserves cases but is not case-sensitive"),e("li",null,[e("code",null,"getItemURL"),o(" is not implemented yet (see issue "),e("code",{class:"interpreted-text",role:"issue"},"1052"),o(")")])],-1),p=t('<h2 id="google-drive" tabindex="-1">Google Drive <a class="header-anchor" href="#google-drive" aria-label="Permalink to &quot;Google Drive&quot;">​</a></h2><p>A client ID can be obtained by registering your app in the <a href="https://console.developers.google.com/flows/enableapi?apiid=drive" target="_blank" rel="noreferrer">Google Developers Console</a>.</p><ul><li>Create an API, then add credentials for Google Drive API. Specify you will be calling the API from a &quot;Web browser (Javascript)&quot; project. Select that you want to access &quot;User data&quot;.</li><li>On the next screen, fill out the Authorized JavaScript origins and Authorized redirect URIs for your app (for every route a user can connect from, same as with Dropbox)</li><li>Once your app is running in production, you will want to get verified by Google to avoid a security warning when the user first connects their account</li></ul><h3 id="known-issues-1" tabindex="-1">Known issues <a class="header-anchor" href="#known-issues-1" aria-label="Permalink to &quot;Known issues&quot;">​</a></h3>',4),c=e("ul",null,[e("li",null,[o("Sharing public files is not supported yet (see issue "),e("code",{class:"interpreted-text",role:"issue"},"1051"),o(")")]),e("li",null,[e("code",null,"getItemURL"),o(" is not implemented yet (see issue "),e("code",{class:"interpreted-text",role:"issue"},"1054"),o(")")])],-1),u=[l,d,p,c];function h(g,f,b,_,w,m){return s(),a("div",null,u)}const v=r(i,[["render",h]]);export{x as __pageData,v as default};
